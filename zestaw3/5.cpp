//
// Created by Bartłomiej Grzesik on 24/10/2019.
//

#include <iostream>
#include <cmath>

#define N 1001

int sil[N];
int e[N];

// 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350116

// 5. Obliczanie stałej e z rozwinięcia w szereg
// e=1/0!+1/1!+1/2!+1/3!+... z dokładnością do np. 1000 cyfr dziesiętnych.

int main()
{
    e[0] = 2;
    sil[0] = 1;

    for (int i = 2; i <= N / 2; ++i) {
        int r = 0;
        for (int j = 0; j < N; ++j) {
            int a = r * 10 + sil[j];
            r = a % i;
            sil[j] = a / i;
        }

        int carry = 0;
        for (int j = N - 1; j >= 0; --j) {
            int a = e[j] + sil[j] + carry;
            carry = a / 10;
            e[j] = a % 10;
        }
    }

    std::cout << e[0] << ".";
    for (int i = 1; i < N; ++i) {
        std::cout << e[i];
    }
}